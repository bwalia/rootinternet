name: "Build Root Internet Website Docker Image and Deploy to K3S"

on:
  push:
    branches: [ master ]
    
  workflow_dispatch:
    inputs:
      TARGET_ENV:
        type: choice
        description: 'Please choose the environment'
        default: 'test'
        required: true
        options:
          - dev
          - int
          - test
          - acc
          - prod

      DEPLOYMENT_TYPE:
        type: choice
        description: 'Please select the build only, deploy only or build and deploy'
        default: 'build-and-deploy'
        required: true
        options:
            - build
            - deploy
            - build-and-deploy          
          
      TARGET_CLUSTER:
        type: choice
        description: 'Please choose the cluster'
        default: 'k3s2'
        required: true
        options:
          - k3s1
          - k3s2
          - k3s3
          - k3s4
          - k3s5
              
env:
  IMAGE_TAG: "latest"
  TARGET_IMAGE_TAG: "latest"
  TARGET_STACK: react
  IMAGE_NAME: rootinternet-frontend
  TARGET_ENV: ${{ github.event.inputs.TARGET_ENV || 'dev' }}
  minReplicas: ${{ secrets.MINREPLICAS_TEST || '1' }}
  IMAGE_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  TARGET_CLUSTER: ${{ github.event.inputs.TARGET_CLUSTER || 'k3s2' }}
  KUBE_CONFIG_K3S: ${{ secrets.KUBE_CONFIG_DATA_K3S }}
  DEPLOYMENT_TYPE: ${{ github.event.inputs.DEPLOYMENT_TYPE || 'build-and-deploy' }}

jobs:
    build:
        name: Build the Image and push to Docker Hub
        runs-on: 'rootinternet'
        steps:

        - name: Checkout this repo
          if: ${{ env.DEPLOYMENT_TYPE == 'build' || env.DEPLOYMENT_TYPE == 'build-and-deploy' }} ]
          uses: actions/checkout@v3

        - name: short-sha
          uses: benjlevesque/short-sha@v1.2
          with:
            length: 6

        - run: echo $SHA
          env:
            SHA: ${{ steps.short-sha.outputs.sha }}

        - run: echo $SHA
          env:
            SHA: ${{ env.SHA }}

        - name: Build Root Internet Website image based on the TARGET PLATFORM Image and push to Docker Hub
          if: ${{ env.DEPLOYMENT_TYPE == 'build' || env.DEPLOYMENT_TYPE == 'build-and-deploy' }}
          run: |
                echo "Root Internet Website image builder!"
                echo "Build, tag, and push image to the given Docker Registry."
                docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWD }}
                docker build -f Dockerfile.dev --build-arg TAG=latest -t wsl-${{ env.TARGET_STACK }} . --no-cache
                docker tag wsl-${{ env.TARGET_STACK }} ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TARGET_IMAGE_TAG }}
                docker push ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TARGET_IMAGE_TAG }}
          shell: bash


    deploy:
        name: Deploy the build docker image to the given Environment using Root Internet Helm
        runs-on: [ ubuntu-latest ]
        needs: [ build ]
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v3
        - name: Map Cluster kubeconfig for selected env
          run: |
            if [ "${{ env.TARGET_ENV }}" == "test" ]; then
                echo "KUBE_CONFIG_K3S=${{ secrets.KUBE_CONFIG_DATA_K3S }}" >> $GITHUB_ENV
            else
                echo "KUBE_CONFIG_K3S is set to default env"
            fi
            if [ "${{ env.TARGET_ENV }}" == "acc" ]; then
                echo "KUBE_CONFIG_K3S=${{ secrets.KUBE_CONFIG_DATA_K3S2 }}" >> $GITHUB_ENV
            else
                echo "KUBE_CONFIG_K3S is set to default env"
            fi
            if [ "${{ env.TARGET_ENV }}" == "prod" ]; then
                echo "KUBE_CONFIG_K3S=${{ secrets.KUBE_CONFIG_DATA_K3S2 }}" >> $GITHUB_ENV
            else
                echo "KUBE_CONFIG_K3S is set to default env"
            fi
                      
        - name: Helm Deploy - Release Root Internet Website to K3S2 Rancher
          if: ${{ env.DEPLOYMENT_TYPE == 'deploy' || env.DEPLOYMENT_TYPE == 'build-and-deploy' }}
          uses: koslib/helm-eks-action@master
          env:
            KUBE_CONFIG_DATA: ${{ env.KUBE_CONFIG_K3S }}
          with:
            command: |
              helm upgrade -i rootinternet-${{ env.TARGET_ENV }} ./devops/helm-charts/rootinternet-chart -f devops/helm-charts/rootinternet-chart/values-${{ env.TARGET_ENV }}.yaml --set-string targetImage="${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}" --set-string targetImageTag="${{ env.IMAGE_TAG }}" --namespace ${{ env.TARGET_ENV }} --create-namespace

        - name: Restart Root Internet Website Pods using Kubectl
          if: ${{ env.DEPLOYMENT_TYPE == 'deploy' || env.DEPLOYMENT_TYPE == 'build-and-deploy' }}            
          uses: actions-hub/kubectl@master
          env:
            KUBE_CONFIG: ${{ env.KUBE_CONFIG_K3S }}
          with:
            args: rollout restart deployment/rootinternet-${{ env.TARGET_ENV }}-rootinternet-chart -n ${{ env.TARGET_ENV }}        

        - name: Print Root Internet Website deployment history using Kubectl
          uses: actions-hub/kubectl@master
          env:
            KUBE_CONFIG: ${{ env.KUBE_CONFIG_K3S }}
          with:
            args: rollout history deployment/rootinternet-${{ env.TARGET_ENV }}-rootinternet-chart -n ${{ env.TARGET_ENV }}

        - name: Print Root Internet Website Pods using Kubectl            
          uses: actions-hub/kubectl@master
          env:
            KUBE_CONFIG: ${{ env.KUBE_CONFIG_K3S }}
          with:
            args: get pods -n ${{ env.TARGET_ENV }}     

        - name: Slack Notification for Github updates 
          uses: ravsamhq/notify-slack-action@v2
          if: always()
          with:
            status: ${{ job.status }}
            notification_title: "Root Internet Website Github <{repo_url}|{repo}>{workflow} has {status_message}"
            message_format: "Root Internet Website Github {emoji} *{workflow}* {status_message} in <{repo_url}|{repo}>"
            footer: "Github Repo <{repo_url}|{repo}>"
            #notify_when: "failure"
            mention_users: "balinder.walia,harchran001"
            #mention_users_when: "failure,warnings"
            mention_groups: "C075PEXUB2T"
            #mention_groups_when: "failure,warnings"
          env:
            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

        - name: Slack Notification for Root Internet Website release 
          uses: rtCamp/action-slack-notify@v2
          env:
            SLACK_CHANNEL: general
            SLACK_COLOR: ${{ job.status }}
            SLACK_ICON: https://github.com/rtCamp.png?size=48
            SLACK_MESSAGE: 'Root Internet Website ${{ env.DEPLOYMENT_TYPE }} to ${{ env.TARGET_ENV }} env :rocket:'
            SLACK_TITLE: Root Internet Website deployment status
            SLACK_USERNAME: rtCamp
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}